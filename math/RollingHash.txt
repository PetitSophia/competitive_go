func CalcMul(x, y, m uint64) uint64 {
	ad, bd := x&(1<<31-1), y&(1<<31-1)
	au, bu := x>>31, y>>31
	mid := ad*bu + au*bd
	midu := mid >> 30
	midd := mid & (1<<30 - 1)
	return CalcMod(au*bu*2+midu+(midd<<31)+ad*bd, m)
}
func CalcMod(x, m uint64) uint64 {
	xu := x >> 61
	xd := x & (1<<61 - 1)
	res := xu + xd
	if res >= m {
		res -= m
	}
	return res
}
func makeBase(n int, m uint64) []uint64 {
	base := rand.Uint64() % m
	x := make([]uint64, n)
	x[0] = 1
	for i := 1; i < n; i++ {
		x[i] = CalcMul(x[i-1], base, m)
	}
	return x
}
func calcRHash(s string, d map[rune]uint64, base []uint64, m uint64) uint64 {
	var ret uint64
	for i, r := range s {
		ret += CalcMul(d[r], base[i+1], m)
		ret %= m
	}
	return ret
}
func connect(x, y, m uint64, base []uint64, xlen int) uint64 {
	return (x + CalcMul(y, base[xlen], m)) % m
}
