type Edge struct {
	from int
	to   int
	cost int
}
type Node struct {
	cost int
	from int
}

func BellmanFord(s int, n int, edges []Edge) ([]Node, []bool) {
	nodes := make([]Node, n)
	INF := int(1e+18)
	for i := 0; i < n; i++ {
		nodes[i].cost = INF
		nodes[i].from = -1
	}
	nodes[s].cost = 0
	nodes[s].from = s
	for i := 0; i < n-1; i++ {
		for _, e := range edges {
			if nodes[e.from].cost == INF {
				continue
			}
			if nodes[e.to].cost > nodes[e.from].cost+e.cost {
				nodes[e.to].cost = nodes[e.from].cost + e.cost
				nodes[e.to].from = e.from
			}
		}
	}
	negatives := make([]bool, n)
	for i := 0; i < n; i++ {
		for _, e := range edges {
			if nodes[e.from].cost == INF {
				continue
			}
			if nodes[e.to].cost > nodes[e.from].cost+e.cost {
				nodes[e.to].cost = nodes[e.from].cost + e.cost
				nodes[e.to].from = e.from
				negatives[e.to] = true
			}
			if negatives[e.from] {
				negatives[e.to] = true
			}
		}
	}
	return nodes, negatives
}
